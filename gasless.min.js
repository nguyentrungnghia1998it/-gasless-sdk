var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
define("pow/crypto", ["require", "exports", "crypto"], function (require, exports, crypto_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha256 = exports.randomInRange = exports.rng = exports.DEFAULT_RANDOM_SIZE = void 0;
    const bn = BigInt;
    exports.DEFAULT_RANDOM_SIZE = 32; // 32-bytes
    function rng(size = exports.DEFAULT_RANDOM_SIZE) {
        return bn(`0x${(0, crypto_1.randomBytes)(size).toString("hex")}`);
    }
    exports.rng = rng;
    function randomInRange(min, max) {
        min = bn(min);
        max = bn(max);
        if (min < bn(0) || max < bn(0))
            throw new Error("Negative ranges are not supported");
        if (max <= min)
            throw new Error('"max" must be at least equal to "min" plus 1');
        const entropy = rng();
        const rangeFromZero = entropy % (max - min + bn(1));
        return rangeFromZero + min;
    }
    exports.randomInRange = randomInRange;
    function sha256(msg) {
        return (0, crypto_1.createHash)("sha256").update(msg).digest("hex");
    }
    exports.sha256 = sha256;
});
define("pow/types", ["require", "exports", "pow/crypto"], function (require, exports, crypto_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Puzzle = exports.Question = void 0;
    class Question {
        constructor(difficulty, salt, hash) {
            this.difficulty = difficulty;
            this.salt = salt;
            this.hash = hash;
        }
        static fromObject(obj) {
            return new Question(BigInt("0x" + obj.difficulty), BigInt("0x" + obj.salt), obj.hash);
        }
        toObject() {
            return {
                difficulty: this.difficulty.toString(16),
                salt: this.salt.toString(16),
                hash: this.hash,
            };
        }
        toString() {
            return this.difficulty.toString(16) + this.salt.toString(16) + this.hash;
        }
    }
    exports.Question = Question;
    class Puzzle {
        constructor(question, solution) {
            this.question = question;
            this.solution = solution;
        }
        toObject() {
            return Object.assign({ solution: this.solution.toString(16) }, this.question.toObject());
        }
        toString() {
            return this.question.toString() + this.solution.toString(16);
        }
        key() {
            return (0, crypto_2.sha256)(this.toString());
        }
    }
    exports.Puzzle = Puzzle;
});
define("pow/puzzle", ["require", "exports", "pow/types", "pow/crypto"], function (require, exports, types_1, crypto_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.POWPuzzle = void 0;
    const bn = BigInt;
    const A_MILLION = bn(1000000);
    class POWPuzzle {
        constructor() { }
        static generate(difficulty) {
            if (difficulty <= bn(0))
                throw new Error("The difficulty must be positive");
            const salt = (0, crypto_3.rng)();
            const solution = (0, crypto_3.randomInRange)(0, difficulty);
            const hash = this.hashSolution({ salt, solution });
            return new types_1.Puzzle(new types_1.Question(difficulty, salt, hash), solution);
        }
        static solve(question, onResult) {
            const { salt, hash } = question;
            const difficulty = question.difficulty;
            setTimeout(() => {
                let solution = bn(0);
                while (!this.isValidSolution({ salt, solution }, hash) && solution <= difficulty) {
                    solution++;
                }
                if (onResult) {
                    onResult(solution, question);
                }
            }, 0);
        }
        static solveAsync(question) {
            return __awaiter(this, void 0, void 0, function* () {
                const { salt, hash } = question;
                const difficulty = question.difficulty;
                let solution = bn(0);
                while (!this.isValidSolution({ salt, solution }, hash) && solution <= difficulty) {
                    solution++;
                }
                return solution;
            });
        }
        static isValidSolution(input, target) {
            return this.hashSolution(input) === target;
        }
        static hashSolution(hashParams) {
            const { salt, solution } = hashParams;
            const msg = `${salt.toString(16)}${solution.toString(16)}`;
            return (0, crypto_3.sha256)(msg);
        }
        static estimateDifficulty(seconds) {
            let time1MHashes = this.time1MHashes();
            const difficulty = Math.floor((seconds * 1000 * Number(A_MILLION)) / time1MHashes);
            return bn(difficulty) * bn(2) - bn(1);
        }
        static estimateTime(difficulty) {
            let time1MHashes = this.time1MHashes();
            const numHashes = this.estimateNumHashes(difficulty);
            const avgTimeInMs = (Number(numHashes) * time1MHashes) / Number(A_MILLION);
            const maxTimeInMs = (Number(difficulty) * time1MHashes) / Number(A_MILLION);
            return { avgTime: Math.floor(avgTimeInMs / 1000), maxTime: Math.floor(maxTimeInMs / 1000) };
        }
        /**
         *
         * @returns time in milliseconds to hash 1M times
         */
        static time1MHashes() {
            const salt = (0, crypto_3.rng)();
            const hash = (0, crypto_3.rng)().toString(16);
            let temp = bn(0);
            const start = Date.now();
            while (!this.isValidSolution({ salt, solution: temp }, hash) && temp <= A_MILLION) {
                temp++;
            }
            return Date.now() - start;
        }
        // avg = (1 + 2 +  3 + 4 + 5 + .. + difficulty) / difficulty
        //     = [difficulty * (1 + difficulty) / 2]  / difficulty
        //     = (1 + difficulty) / 2
        static estimateNumHashes(difficulty) {
            return (difficulty + bn(1)) / bn(2);
        }
    }
    exports.POWPuzzle = POWPuzzle;
});
define("pow/index", ["require", "exports", "pow/puzzle", "pow/types", "pow/crypto"], function (require, exports, puzzle_1, types_2, crypto_4) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(puzzle_1, exports);
    __exportStar(types_2, exports);
    __exportStar(crypto_4, exports);
});
define("gasless/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GaslessTypes = void 0;
    var GaslessTypes;
    (function (GaslessTypes) {
        GaslessTypes["POW"] = "pow";
        GaslessTypes["Dapp"] = "dapp";
        GaslessTypes["Pay"] = "pay";
    })(GaslessTypes = exports.GaslessTypes || (exports.GaslessTypes = {}));
});
define("configs", [], [
    {
        "name": "devnet",
        "genesisHash": "9cMNV5PLw2fMkzD9FNot8EhMz9qvtuXS7gjGFDBqcK53",
        "gasLessServiceURL": "http://localhost:3000/api"
    },
    {
        "name": "testnet",
        "genesisHash": "3boguCuaPpn6vkaxiGDfcR8yYcokzFDuu3sqWLVoAoUh",
        "gasLessServiceURL": "https://pr-10.d2qjlpuikx6xmz.amplifyapp.com/api"
    },
    {
        "name": "mainnet",
        "genesisHash": "7PNFRHLxT9FcAxSUcg3P8BraJnnUBnjuy8LwRbRJvVkX",
        "gasLessServiceURL": "http://localhost:3000/api"
    }
]);
define("gasless/api", ["require", "exports", "axios", "bs58", "@solana/web3.js", "configs"], function (require, exports, axios_1, bs58_1, web3_js_1, configs_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.postSolution = exports.getPuzzle = exports.sendToGasless = exports.getGaslessInfo = exports.getNetwork = void 0;
    axios_1 = __importDefault(axios_1);
    bs58_1 = __importDefault(bs58_1);
    configs_json_1 = __importDefault(configs_json_1);
    function getNetwork(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const genesisHash = yield connection.getGenesisHash();
            const network = configs_json_1.default.find((obj) => obj.genesisHash === genesisHash);
            if (!network) {
                throw new Error(`Network is unknown. Please connect to Renec mainnet or testnet.`);
            }
            return network;
        });
    }
    exports.getNetwork = getNetwork;
    function getGaslessInfo(connection) {
        return __awaiter(this, void 0, void 0, function* () {
            const network = yield getNetwork(connection);
            const response = (yield axios_1.default.get(network.gasLessServiceURL, {
                headers: { Accept: "application/json" },
            })).data;
            const feePayer = new web3_js_1.PublicKey(response.feePayer);
            return { feePayer };
        });
    }
    exports.getGaslessInfo = getGaslessInfo;
    function sendToGasless(connection, signed, type) {
        return __awaiter(this, void 0, void 0, function* () {
            const network = yield getNetwork(connection);
            const buff = signed.serialize({ requireAllSignatures: false });
            const serializedBs58 = bs58_1.default.encode(buff);
            const response = (yield axios_1.default.post(network.gasLessServiceURL + `/${type}/submit`, {
                transaction: serializedBs58,
            })).data;
            const txid = response === null || response === void 0 ? void 0 : response.signature;
            return txid;
        });
    }
    exports.sendToGasless = sendToGasless;
    function getPuzzle(connection, address) {
        return __awaiter(this, void 0, void 0, function* () {
            const network = yield getNetwork(connection);
            const response = (yield axios_1.default.get(network.gasLessServiceURL + `/v1/pow/puzzle`, {
                headers: { Accept: "application/json" },
                params: {
                    userAddress: address.toBase58(),
                },
            })).data;
            const puzzle = response === null || response === void 0 ? void 0 : response.puzzle;
            return puzzle;
        });
    }
    exports.getPuzzle = getPuzzle;
    function postSolution(connection, rawSolution, signed) {
        return __awaiter(this, void 0, void 0, function* () {
            const network = yield getNetwork(connection);
            const buff = signed.serialize({ requireAllSignatures: false });
            const serializedBs58 = bs58_1.default.encode(buff);
            const response = (yield axios_1.default.post(network.gasLessServiceURL + `/v1/pow/solution`, {
                solution: rawSolution,
                transaction: serializedBs58,
            })).data;
            const txid = response === null || response === void 0 ? void 0 : response.signature;
            return txid;
        });
    }
    exports.postSolution = postSolution;
});
define("dapp/artifacts/whirlpool", [], {
    "version": "0.1.0",
    "name": "whirlpool",
    "instructions": [
        {
            "name": "initializeConfig",
            "accounts": [
                {
                    "name": "config",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "funder",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "feeAuthority",
                    "type": "publicKey"
                },
                {
                    "name": "collectProtocolFeesAuthority",
                    "type": "publicKey"
                },
                {
                    "name": "rewardEmissionsSuperAuthority",
                    "type": "publicKey"
                },
                {
                    "name": "poolCreatorAuthority",
                    "type": "publicKey"
                },
                {
                    "name": "defaultProtocolFeeRate",
                    "type": "u16"
                }
            ]
        },
        {
            "name": "initializePool",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenMintA",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenMintB",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "poolCreator",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultA",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "tokenVaultB",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "feeTier",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "rent",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "bumps",
                    "type": {
                        "defined": "WhirlpoolBumps"
                    }
                },
                {
                    "name": "tickSpacing",
                    "type": "u16"
                },
                {
                    "name": "initialSqrtPrice",
                    "type": "u128"
                }
            ]
        },
        {
            "name": "initializeTickArray",
            "accounts": [
                {
                    "name": "whirlpool",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "funder",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "tickArray",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "startTickIndex",
                    "type": "i32"
                }
            ]
        },
        {
            "name": "initializeFeeTier",
            "accounts": [
                {
                    "name": "config",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "feeTier",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "funder",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "feeAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "tickSpacing",
                    "type": "u16"
                },
                {
                    "name": "defaultFeeRate",
                    "type": "u16"
                }
            ]
        },
        {
            "name": "initializeReward",
            "accounts": [
                {
                    "name": "rewardAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "funder",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "rewardMint",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "rewardVault",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "rent",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "rewardIndex",
                    "type": "u8"
                }
            ]
        },
        {
            "name": "setRewardEmissions",
            "accounts": [
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "rewardAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "rewardVault",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "rewardIndex",
                    "type": "u8"
                },
                {
                    "name": "emissionsPerSecondX64",
                    "type": "u128"
                }
            ]
        },
        {
            "name": "openPosition",
            "accounts": [
                {
                    "name": "funder",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "owner",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "position",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "positionMint",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "positionTokenAccount",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "whirlpool",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "rent",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "associatedTokenProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "bumps",
                    "type": {
                        "defined": "OpenPositionBumps"
                    }
                },
                {
                    "name": "tickLowerIndex",
                    "type": "i32"
                },
                {
                    "name": "tickUpperIndex",
                    "type": "i32"
                }
            ]
        },
        {
            "name": "openPositionWithMetadata",
            "accounts": [
                {
                    "name": "funder",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "owner",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "position",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "positionMint",
                    "isMut": true,
                    "isSigner": true
                },
                {
                    "name": "positionMetadataAccount",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "positionTokenAccount",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "whirlpool",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "systemProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "rent",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "associatedTokenProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "metadataProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "metadataUpdateAuth",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "bumps",
                    "type": {
                        "defined": "OpenPositionWithMetadataBumps"
                    }
                },
                {
                    "name": "tickLowerIndex",
                    "type": "i32"
                },
                {
                    "name": "tickUpperIndex",
                    "type": "i32"
                }
            ]
        },
        {
            "name": "increaseLiquidity",
            "accounts": [
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "positionAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "position",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "positionTokenAccount",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenOwnerAccountA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenOwnerAccountB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tickArrayLower",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tickArrayUpper",
                    "isMut": true,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "liquidityAmount",
                    "type": "u128"
                },
                {
                    "name": "tokenMaxA",
                    "type": "u64"
                },
                {
                    "name": "tokenMaxB",
                    "type": "u64"
                }
            ]
        },
        {
            "name": "decreaseLiquidity",
            "accounts": [
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "positionAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "position",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "positionTokenAccount",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenOwnerAccountA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenOwnerAccountB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tickArrayLower",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tickArrayUpper",
                    "isMut": true,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "liquidityAmount",
                    "type": "u128"
                },
                {
                    "name": "tokenMinA",
                    "type": "u64"
                },
                {
                    "name": "tokenMinB",
                    "type": "u64"
                }
            ]
        },
        {
            "name": "updateFeesAndRewards",
            "accounts": [
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "position",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tickArrayLower",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tickArrayUpper",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "collectFees",
            "accounts": [
                {
                    "name": "whirlpool",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "positionAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "position",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "positionTokenAccount",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenOwnerAccountA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenOwnerAccountB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "collectReward",
            "accounts": [
                {
                    "name": "whirlpool",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "positionAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "position",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "positionTokenAccount",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "rewardOwnerAccount",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "rewardVault",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "rewardIndex",
                    "type": "u8"
                }
            ]
        },
        {
            "name": "collectProtocolFees",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "collectProtocolFeesAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "tokenVaultA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenDestinationA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenDestinationB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "swap",
            "accounts": [
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenOwnerAccountA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultA",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenOwnerAccountB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tokenVaultB",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tickArray0",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tickArray1",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "tickArray2",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "oracle",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "amount",
                    "type": "u64"
                },
                {
                    "name": "otherAmountThreshold",
                    "type": "u64"
                },
                {
                    "name": "sqrtPriceLimit",
                    "type": "u128"
                },
                {
                    "name": "amountSpecifiedIsInput",
                    "type": "bool"
                },
                {
                    "name": "aToB",
                    "type": "bool"
                }
            ]
        },
        {
            "name": "closePosition",
            "accounts": [
                {
                    "name": "positionAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "receiver",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "position",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "positionMint",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "positionTokenAccount",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "whirlpool",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "tokenProgram",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "setDefaultFeeRate",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "feeTier",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "feeAuthority",
                    "isMut": false,
                    "isSigner": true
                }
            ],
            "args": [
                {
                    "name": "defaultFeeRate",
                    "type": "u16"
                }
            ]
        },
        {
            "name": "setDefaultProtocolFeeRate",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "feeAuthority",
                    "isMut": false,
                    "isSigner": true
                }
            ],
            "args": [
                {
                    "name": "defaultProtocolFeeRate",
                    "type": "u16"
                }
            ]
        },
        {
            "name": "setFeeRate",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "feeAuthority",
                    "isMut": false,
                    "isSigner": true
                }
            ],
            "args": [
                {
                    "name": "feeRate",
                    "type": "u16"
                }
            ]
        },
        {
            "name": "setProtocolFeeRate",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "feeAuthority",
                    "isMut": false,
                    "isSigner": true
                }
            ],
            "args": [
                {
                    "name": "protocolFeeRate",
                    "type": "u16"
                }
            ]
        },
        {
            "name": "setFeeAuthority",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "feeAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "newFeeAuthority",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "setCollectProtocolFeesAuthority",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "collectProtocolFeesAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "newCollectProtocolFeesAuthority",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "setRewardAuthority",
            "accounts": [
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "rewardAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "newRewardAuthority",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "rewardIndex",
                    "type": "u8"
                }
            ]
        },
        {
            "name": "setPoolCreatorAuthority",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "poolCreatorAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "newPoolCreatorAuthority",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "setRewardAuthorityBySuperAuthority",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "rewardEmissionsSuperAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "newRewardAuthority",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": [
                {
                    "name": "rewardIndex",
                    "type": "u8"
                }
            ]
        },
        {
            "name": "setRewardEmissionsSuperAuthority",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "rewardEmissionsSuperAuthority",
                    "isMut": false,
                    "isSigner": true
                },
                {
                    "name": "newRewardEmissionsSuperAuthority",
                    "isMut": false,
                    "isSigner": false
                }
            ],
            "args": []
        },
        {
            "name": "setEnableFlag",
            "accounts": [
                {
                    "name": "whirlpoolsConfig",
                    "isMut": false,
                    "isSigner": false
                },
                {
                    "name": "whirlpool",
                    "isMut": true,
                    "isSigner": false
                },
                {
                    "name": "poolCreatorAuthority",
                    "isMut": false,
                    "isSigner": true
                }
            ],
            "args": [
                {
                    "name": "isEnabled",
                    "type": "bool"
                }
            ]
        }
    ],
    "accounts": [
        {
            "name": "WhirlpoolsConfig",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "feeAuthority",
                        "type": "publicKey"
                    },
                    {
                        "name": "collectProtocolFeesAuthority",
                        "type": "publicKey"
                    },
                    {
                        "name": "rewardEmissionsSuperAuthority",
                        "type": "publicKey"
                    },
                    {
                        "name": "poolCreatorAuthority",
                        "type": "publicKey"
                    },
                    {
                        "name": "defaultProtocolFeeRate",
                        "type": "u16"
                    }
                ]
            }
        },
        {
            "name": "FeeTier",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "whirlpoolsConfig",
                        "type": "publicKey"
                    },
                    {
                        "name": "tickSpacing",
                        "type": "u16"
                    },
                    {
                        "name": "defaultFeeRate",
                        "type": "u16"
                    }
                ]
            }
        },
        {
            "name": "Position",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "whirlpool",
                        "type": "publicKey"
                    },
                    {
                        "name": "positionMint",
                        "type": "publicKey"
                    },
                    {
                        "name": "liquidity",
                        "type": "u128"
                    },
                    {
                        "name": "tickLowerIndex",
                        "type": "i32"
                    },
                    {
                        "name": "tickUpperIndex",
                        "type": "i32"
                    },
                    {
                        "name": "feeGrowthCheckpointA",
                        "type": "u128"
                    },
                    {
                        "name": "feeOwedA",
                        "type": "u64"
                    },
                    {
                        "name": "feeGrowthCheckpointB",
                        "type": "u128"
                    },
                    {
                        "name": "feeOwedB",
                        "type": "u64"
                    },
                    {
                        "name": "rewardInfos",
                        "type": {
                            "array": [
                                {
                                    "defined": "PositionRewardInfo"
                                },
                                3
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "TickArray",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "startTickIndex",
                        "type": "i32"
                    },
                    {
                        "name": "ticks",
                        "type": {
                            "array": [
                                {
                                    "defined": "Tick"
                                },
                                88
                            ]
                        }
                    },
                    {
                        "name": "whirlpool",
                        "type": "publicKey"
                    }
                ]
            }
        },
        {
            "name": "Whirlpool",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "isEnabled",
                        "type": "bool"
                    },
                    {
                        "name": "whirlpoolsConfig",
                        "type": "publicKey"
                    },
                    {
                        "name": "whirlpoolBump",
                        "type": {
                            "array": [
                                "u8",
                                1
                            ]
                        }
                    },
                    {
                        "name": "tickSpacing",
                        "type": "u16"
                    },
                    {
                        "name": "tickSpacingSeed",
                        "type": {
                            "array": [
                                "u8",
                                2
                            ]
                        }
                    },
                    {
                        "name": "feeRate",
                        "type": "u16"
                    },
                    {
                        "name": "protocolFeeRate",
                        "type": "u16"
                    },
                    {
                        "name": "liquidity",
                        "type": "u128"
                    },
                    {
                        "name": "sqrtPrice",
                        "type": "u128"
                    },
                    {
                        "name": "tickCurrentIndex",
                        "type": "i32"
                    },
                    {
                        "name": "protocolFeeOwedA",
                        "type": "u64"
                    },
                    {
                        "name": "protocolFeeOwedB",
                        "type": "u64"
                    },
                    {
                        "name": "tokenMintA",
                        "type": "publicKey"
                    },
                    {
                        "name": "tokenVaultA",
                        "type": "publicKey"
                    },
                    {
                        "name": "feeGrowthGlobalA",
                        "type": "u128"
                    },
                    {
                        "name": "tokenMintB",
                        "type": "publicKey"
                    },
                    {
                        "name": "tokenVaultB",
                        "type": "publicKey"
                    },
                    {
                        "name": "feeGrowthGlobalB",
                        "type": "u128"
                    },
                    {
                        "name": "rewardLastUpdatedTimestamp",
                        "type": "u64"
                    },
                    {
                        "name": "rewardInfos",
                        "type": {
                            "array": [
                                {
                                    "defined": "WhirlpoolRewardInfo"
                                },
                                3
                            ]
                        }
                    }
                ]
            }
        }
    ],
    "types": [
        {
            "name": "OpenPositionBumps",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "positionBump",
                        "type": "u8"
                    }
                ]
            }
        },
        {
            "name": "OpenPositionWithMetadataBumps",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "positionBump",
                        "type": "u8"
                    },
                    {
                        "name": "metadataBump",
                        "type": "u8"
                    }
                ]
            }
        },
        {
            "name": "PositionRewardInfo",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "growthInsideCheckpoint",
                        "type": "u128"
                    },
                    {
                        "name": "amountOwed",
                        "type": "u64"
                    }
                ]
            }
        },
        {
            "name": "Tick",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "initialized",
                        "type": "bool"
                    },
                    {
                        "name": "liquidityNet",
                        "type": "i128"
                    },
                    {
                        "name": "liquidityGross",
                        "type": "u128"
                    },
                    {
                        "name": "feeGrowthOutsideA",
                        "type": "u128"
                    },
                    {
                        "name": "feeGrowthOutsideB",
                        "type": "u128"
                    },
                    {
                        "name": "rewardGrowthsOutside",
                        "type": {
                            "array": [
                                "u128",
                                3
                            ]
                        }
                    }
                ]
            }
        },
        {
            "name": "WhirlpoolRewardInfo",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "mint",
                        "type": "publicKey"
                    },
                    {
                        "name": "vault",
                        "type": "publicKey"
                    },
                    {
                        "name": "authority",
                        "type": "publicKey"
                    },
                    {
                        "name": "emissionsPerSecondX64",
                        "type": "u128"
                    },
                    {
                        "name": "growthGlobalX64",
                        "type": "u128"
                    }
                ]
            }
        },
        {
            "name": "WhirlpoolBumps",
            "type": {
                "kind": "struct",
                "fields": [
                    {
                        "name": "whirlpoolBump",
                        "type": "u8"
                    }
                ]
            }
        },
        {
            "name": "CurrIndex",
            "type": {
                "kind": "enum",
                "variants": [
                    {
                        "name": "Below"
                    },
                    {
                        "name": "Inside"
                    },
                    {
                        "name": "Above"
                    }
                ]
            }
        },
        {
            "name": "TickLabel",
            "type": {
                "kind": "enum",
                "variants": [
                    {
                        "name": "Upper"
                    },
                    {
                        "name": "Lower"
                    }
                ]
            }
        },
        {
            "name": "Direction",
            "type": {
                "kind": "enum",
                "variants": [
                    {
                        "name": "Left"
                    },
                    {
                        "name": "Right"
                    }
                ]
            }
        }
    ],
    "errors": [
        {
            "code": 6000,
            "name": "InvalidEnum",
            "msg": "Enum value could not be converted"
        },
        {
            "code": 6001,
            "name": "InvalidStartTick",
            "msg": "Invalid start tick index provided."
        },
        {
            "code": 6002,
            "name": "TickArrayExistInPool",
            "msg": "Tick-array already exists in this whirlpool"
        },
        {
            "code": 6003,
            "name": "TickArrayIndexOutofBounds",
            "msg": "Attempt to search for a tick-array failed"
        },
        {
            "code": 6004,
            "name": "InvalidTickSpacing",
            "msg": "Tick-spacing is not supported"
        },
        {
            "code": 6005,
            "name": "ClosePositionNotEmpty",
            "msg": "Position is not empty It cannot be closed"
        },
        {
            "code": 6006,
            "name": "DivideByZero",
            "msg": "Unable to divide by zero"
        },
        {
            "code": 6007,
            "name": "NumberCastError",
            "msg": "Unable to cast number into BigInt"
        },
        {
            "code": 6008,
            "name": "NumberDownCastError",
            "msg": "Unable to down cast number"
        },
        {
            "code": 6009,
            "name": "TickNotFound",
            "msg": "Tick not found within tick array"
        },
        {
            "code": 6010,
            "name": "InvalidTickIndex",
            "msg": "Provided tick index is either out of bounds or uninitializable"
        },
        {
            "code": 6011,
            "name": "SqrtPriceOutOfBounds",
            "msg": "Provided sqrt price out of bounds"
        },
        {
            "code": 6012,
            "name": "LiquidityZero",
            "msg": "Liquidity amount must be greater than zero"
        },
        {
            "code": 6013,
            "name": "LiquidityTooHigh",
            "msg": "Liquidity amount must be less than i64::MAX"
        },
        {
            "code": 6014,
            "name": "LiquidityOverflow",
            "msg": "Liquidity overflow"
        },
        {
            "code": 6015,
            "name": "LiquidityUnderflow",
            "msg": "Liquidity underflow"
        },
        {
            "code": 6016,
            "name": "LiquidityNetError",
            "msg": "Tick liquidity net underflowed or overflowed"
        },
        {
            "code": 6017,
            "name": "TokenMaxExceeded",
            "msg": "Exceeded token max"
        },
        {
            "code": 6018,
            "name": "TokenMinSubceeded",
            "msg": "Did not meet token min"
        },
        {
            "code": 6019,
            "name": "MissingOrInvalidDelegate",
            "msg": "Position token account has a missing or invalid delegate"
        },
        {
            "code": 6020,
            "name": "InvalidPositionTokenAmount",
            "msg": "Position token amount must be 1"
        },
        {
            "code": 6021,
            "name": "InvalidTimestampConversion",
            "msg": "Timestamp should be convertible from i64 to u64"
        },
        {
            "code": 6022,
            "name": "InvalidTimestamp",
            "msg": "Timestamp should be greater than the last updated timestamp"
        },
        {
            "code": 6023,
            "name": "InvalidTickArraySequence",
            "msg": "Invalid tick array sequence provided for instruction."
        },
        {
            "code": 6024,
            "name": "InvalidTokenMintOrder",
            "msg": "Token Mint in wrong order"
        },
        {
            "code": 6025,
            "name": "RewardNotInitialized",
            "msg": "Reward not initialized"
        },
        {
            "code": 6026,
            "name": "InvalidRewardIndex",
            "msg": "Invalid reward index"
        },
        {
            "code": 6027,
            "name": "RewardVaultAmountInsufficient",
            "msg": "Reward vault requires amount to support emissions for at least one day"
        },
        {
            "code": 6028,
            "name": "FeeRateMaxExceeded",
            "msg": "Exceeded max fee rate"
        },
        {
            "code": 6029,
            "name": "ProtocolFeeRateMaxExceeded",
            "msg": "Exceeded max protocol fee rate"
        },
        {
            "code": 6030,
            "name": "MultiplicationShiftRightOverflow",
            "msg": "Multiplication with shift right overflow"
        },
        {
            "code": 6031,
            "name": "MulDivOverflow",
            "msg": "Muldiv overflow"
        },
        {
            "code": 6032,
            "name": "MulDivInvalidInput",
            "msg": "Invalid div_u256 input"
        },
        {
            "code": 6033,
            "name": "MultiplicationOverflow",
            "msg": "Multiplication overflow"
        },
        {
            "code": 6034,
            "name": "InvalidSqrtPriceLimitDirection",
            "msg": "Provided SqrtPriceLimit not in the same direction as the swap."
        },
        {
            "code": 6035,
            "name": "ZeroTradableAmount",
            "msg": "There are no tradable amount to swap."
        },
        {
            "code": 6036,
            "name": "AmountOutBelowMinimum",
            "msg": "Amount out below minimum threshold"
        },
        {
            "code": 6037,
            "name": "AmountInAboveMaximum",
            "msg": "Amount in above maximum threshold"
        },
        {
            "code": 6038,
            "name": "TickArraySequenceInvalidIndex",
            "msg": "Invalid index for tick array sequence"
        },
        {
            "code": 6039,
            "name": "AmountCalcOverflow",
            "msg": "Amount calculated overflows"
        },
        {
            "code": 6040,
            "name": "AmountRemainingOverflow",
            "msg": "Amount remaining overflows"
        },
        {
            "code": 6041,
            "name": "PoolWasDisabled",
            "msg": "Pool was disabled"
        }
    ]
});
define("dapp/artifacts/index", ["require", "exports", "@solana/web3.js", "@project-serum/anchor", "dapp/artifacts/whirlpool"], function (require, exports, web3_js_2, anchor_1, whirlpool_json_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.loadArtifacts = void 0;
    whirlpool_json_1 = __importDefault(whirlpool_json_1);
    const exampleDapps = [
        {
            name: "NemoSwap",
            programId: "7Vd9eYAH2MZxD6LYHEnDs8Eko9Bx3UydvtNvnJ8vKW21",
            idl: whirlpool_json_1.default,
        },
    ];
    function loadArtifacts(network) {
        const artifacts = [];
        // user network to get dapps info
        const dapps = exampleDapps; // get from gasless
        if (dapps.length > 0) {
            dapps.forEach((dapp) => {
                artifacts.push({
                    name: dapp.name,
                    programId: new web3_js_2.PublicKey(dapp.programId),
                    coder: new anchor_1.BorshCoder(dapp.idl),
                });
            });
        }
        return artifacts;
    }
    exports.loadArtifacts = loadArtifacts;
});
define("helpers/decoder/types", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssociatedTokenInstruction = exports.TokenInstruction = void 0;
    /** Instructions defined by the program */
    var TokenInstruction;
    (function (TokenInstruction) {
        TokenInstruction[TokenInstruction["InitializeMint"] = 0] = "InitializeMint";
        TokenInstruction[TokenInstruction["InitializeAccount"] = 1] = "InitializeAccount";
        TokenInstruction[TokenInstruction["InitializeMultisig"] = 2] = "InitializeMultisig";
        TokenInstruction[TokenInstruction["Transfer"] = 3] = "Transfer";
        TokenInstruction[TokenInstruction["Approve"] = 4] = "Approve";
        TokenInstruction[TokenInstruction["Revoke"] = 5] = "Revoke";
        TokenInstruction[TokenInstruction["SetAuthority"] = 6] = "SetAuthority";
        TokenInstruction[TokenInstruction["MintTo"] = 7] = "MintTo";
        TokenInstruction[TokenInstruction["Burn"] = 8] = "Burn";
        TokenInstruction[TokenInstruction["CloseAccount"] = 9] = "CloseAccount";
        TokenInstruction[TokenInstruction["FreezeAccount"] = 10] = "FreezeAccount";
        TokenInstruction[TokenInstruction["ThawAccount"] = 11] = "ThawAccount";
        TokenInstruction[TokenInstruction["TransferChecked"] = 12] = "TransferChecked";
        TokenInstruction[TokenInstruction["ApproveChecked"] = 13] = "ApproveChecked";
        TokenInstruction[TokenInstruction["MintToChecked"] = 14] = "MintToChecked";
        TokenInstruction[TokenInstruction["BurnChecked"] = 15] = "BurnChecked";
        TokenInstruction[TokenInstruction["InitializeAccount2"] = 16] = "InitializeAccount2";
        TokenInstruction[TokenInstruction["SyncNative"] = 17] = "SyncNative";
        TokenInstruction[TokenInstruction["InitializeAccount3"] = 18] = "InitializeAccount3";
        TokenInstruction[TokenInstruction["InitializeMultisig2"] = 19] = "InitializeMultisig2";
        TokenInstruction[TokenInstruction["InitializeMint2"] = 20] = "InitializeMint2";
        TokenInstruction[TokenInstruction["GetAccountDataSize"] = 21] = "GetAccountDataSize";
        TokenInstruction[TokenInstruction["InitializeImmutableOwner"] = 22] = "InitializeImmutableOwner";
        TokenInstruction[TokenInstruction["AmountToUiAmount"] = 23] = "AmountToUiAmount";
        TokenInstruction[TokenInstruction["UiAmountToAmount"] = 24] = "UiAmountToAmount";
        TokenInstruction[TokenInstruction["InitializeMintCloseAuthority"] = 25] = "InitializeMintCloseAuthority";
        TokenInstruction[TokenInstruction["TransferFeeExtension"] = 26] = "TransferFeeExtension";
        TokenInstruction[TokenInstruction["ConfidentialTransferExtension"] = 27] = "ConfidentialTransferExtension";
        TokenInstruction[TokenInstruction["DefaultAccountStateExtension"] = 28] = "DefaultAccountStateExtension";
        TokenInstruction[TokenInstruction["Reallocate"] = 29] = "Reallocate";
        TokenInstruction[TokenInstruction["MemoTransferExtension"] = 30] = "MemoTransferExtension";
        TokenInstruction[TokenInstruction["CreateNativeMint"] = 31] = "CreateNativeMint";
        TokenInstruction[TokenInstruction["InitializeNonTransferableMint"] = 32] = "InitializeNonTransferableMint";
        TokenInstruction[TokenInstruction["InterestBearingMintExtension"] = 33] = "InterestBearingMintExtension";
        TokenInstruction[TokenInstruction["CpiGuardExtension"] = 34] = "CpiGuardExtension";
        TokenInstruction[TokenInstruction["InitializePermanentDelegate"] = 35] = "InitializePermanentDelegate";
    })(TokenInstruction = exports.TokenInstruction || (exports.TokenInstruction = {}));
    var AssociatedTokenInstruction;
    (function (AssociatedTokenInstruction) {
        AssociatedTokenInstruction[AssociatedTokenInstruction["Create"] = 0] = "Create";
    })(AssociatedTokenInstruction = exports.AssociatedTokenInstruction || (exports.AssociatedTokenInstruction = {}));
});
define("helpers/decoder/errors", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenUnsupportedInstructionError = exports.TokenInvalidInstructionTypeError = exports.TokenInvalidInstructionDataError = exports.TokenInvalidInstructionKeysError = exports.TokenInvalidInstructionProgramError = exports.TokenOwnerOffCurveError = exports.TokenInvalidOwnerError = exports.TokenInvalidMintError = exports.TokenInvalidAccountSizeError = exports.TokenInvalidAccountOwnerError = exports.TokenInvalidAccountError = exports.TokenAccountNotFoundError = exports.TokenError = void 0;
    /** Base class for errors */
    class TokenError extends Error {
        constructor(message) {
            super(message);
        }
    }
    exports.TokenError = TokenError;
    /** Thrown if an account is not found at the expected address */
    class TokenAccountNotFoundError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenAccountNotFoundError";
        }
    }
    exports.TokenAccountNotFoundError = TokenAccountNotFoundError;
    /** Thrown if a program state account is not a valid Account */
    class TokenInvalidAccountError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenInvalidAccountError";
        }
    }
    exports.TokenInvalidAccountError = TokenInvalidAccountError;
    /** Thrown if a program state account is not owned by the expected token program */
    class TokenInvalidAccountOwnerError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenInvalidAccountOwnerError";
        }
    }
    exports.TokenInvalidAccountOwnerError = TokenInvalidAccountOwnerError;
    /** Thrown if the byte length of an program state account doesn't match the expected size */
    class TokenInvalidAccountSizeError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenInvalidAccountSizeError";
        }
    }
    exports.TokenInvalidAccountSizeError = TokenInvalidAccountSizeError;
    /** Thrown if the mint of a token account doesn't match the expected mint */
    class TokenInvalidMintError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenInvalidMintError";
        }
    }
    exports.TokenInvalidMintError = TokenInvalidMintError;
    /** Thrown if the owner of a token account doesn't match the expected owner */
    class TokenInvalidOwnerError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenInvalidOwnerError";
        }
    }
    exports.TokenInvalidOwnerError = TokenInvalidOwnerError;
    /** Thrown if the owner of a token account is a PDA (Program Derived Address) */
    class TokenOwnerOffCurveError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenOwnerOffCurveError";
        }
    }
    exports.TokenOwnerOffCurveError = TokenOwnerOffCurveError;
    /** Thrown if an instruction's program is invalid */
    class TokenInvalidInstructionProgramError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenInvalidInstructionProgramError";
        }
    }
    exports.TokenInvalidInstructionProgramError = TokenInvalidInstructionProgramError;
    /** Thrown if an instruction's keys are invalid */
    class TokenInvalidInstructionKeysError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenInvalidInstructionKeysError";
        }
    }
    exports.TokenInvalidInstructionKeysError = TokenInvalidInstructionKeysError;
    /** Thrown if an instruction's data is invalid */
    class TokenInvalidInstructionDataError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenInvalidInstructionDataError";
        }
    }
    exports.TokenInvalidInstructionDataError = TokenInvalidInstructionDataError;
    /** Thrown if an instruction's type is invalid */
    class TokenInvalidInstructionTypeError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenInvalidInstructionTypeError";
        }
    }
    exports.TokenInvalidInstructionTypeError = TokenInvalidInstructionTypeError;
    /** Thrown if the program does not support the desired instruction */
    class TokenUnsupportedInstructionError extends TokenError {
        constructor() {
            super(...arguments);
            this.name = "TokenUnsupportedInstructionError";
        }
    }
    exports.TokenUnsupportedInstructionError = TokenUnsupportedInstructionError;
});
define("helpers/decoder/closeAccountIx", ["require", "exports", "@solana/buffer-layout", "@solana/spl-token", "helpers/decoder/types", "helpers/decoder/errors"], function (require, exports, buffer_layout_1, spl_token_1, types_3, errors_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeCloseAccountInstructionUnchecked = exports.decodeCloseAccountInstruction = exports.closeAccountInstructionData = void 0;
    /** TODO: docs */
    exports.closeAccountInstructionData = (0, buffer_layout_1.struct)([(0, buffer_layout_1.u8)("instruction")]);
    /**
     * Decode a CloseAccount instruction and validate it
     *
     * @param instruction Transaction instruction to decode
     * @param programId   SPL Token program account
     *
     * @return Decoded, valid instruction
     */
    function decodeCloseAccountInstruction(instruction, programId = spl_token_1.TOKEN_PROGRAM_ID) {
        if (!instruction.programId.equals(programId))
            throw new errors_1.TokenInvalidInstructionProgramError();
        if (instruction.data.length !== exports.closeAccountInstructionData.span)
            throw new errors_1.TokenInvalidInstructionDataError();
        const { keys: { account, destination, authority, multiSigners }, data, } = decodeCloseAccountInstructionUnchecked(instruction);
        if (data.instruction !== types_3.TokenInstruction.CloseAccount)
            throw new errors_1.TokenInvalidInstructionTypeError();
        if (!account || !destination || !authority)
            throw new errors_1.TokenInvalidInstructionKeysError();
        // TODO: key checks?
        return {
            programId,
            keys: {
                account,
                destination,
                authority,
                multiSigners,
            },
            data,
        };
    }
    exports.decodeCloseAccountInstruction = decodeCloseAccountInstruction;
    /**
     * Decode a CloseAccount instruction without validating it
     *
     * @param instruction Transaction instruction to decode
     *
     * @return Decoded, non-validated instruction
     */
    function decodeCloseAccountInstructionUnchecked({ programId, keys: [account, destination, authority, ...multiSigners], data, }) {
        return {
            programId,
            keys: {
                account,
                destination,
                authority,
                multiSigners,
            },
            data: exports.closeAccountInstructionData.decode(data),
        };
    }
    exports.decodeCloseAccountInstructionUnchecked = decodeCloseAccountInstructionUnchecked;
});
define("helpers/decoder/initializeAccountIx", ["require", "exports", "@solana/buffer-layout", "@solana/spl-token", "helpers/decoder/types", "helpers/decoder/errors"], function (require, exports, buffer_layout_2, spl_token_2, types_4, errors_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeInitializeAccountInstructionUnchecked = exports.decodeInitializeAccountInstruction = exports.initializeAccountInstructionData = void 0;
    /** TODO: docs */
    exports.initializeAccountInstructionData = (0, buffer_layout_2.struct)([
        (0, buffer_layout_2.u8)("instruction"),
    ]);
    /**
     * Decode an InitializeAccount instruction and validate it
     *
     * @param instruction Transaction instruction to decode
     * @param programId   SPL Token program account
     *
     * @return Decoded, valid instruction
     */
    function decodeInitializeAccountInstruction(instruction, programId = spl_token_2.TOKEN_PROGRAM_ID) {
        if (!instruction.programId.equals(programId))
            throw new errors_2.TokenInvalidInstructionProgramError();
        if (instruction.data.length !== exports.initializeAccountInstructionData.span)
            throw new errors_2.TokenInvalidInstructionDataError();
        const { keys: { account, mint, owner, rent }, data, } = decodeInitializeAccountInstructionUnchecked(instruction);
        if (data.instruction !== types_4.TokenInstruction.InitializeAccount)
            throw new errors_2.TokenInvalidInstructionTypeError();
        if (!account || !mint || !owner || !rent)
            throw new errors_2.TokenInvalidInstructionKeysError();
        // TODO: key checks?
        return {
            programId,
            keys: {
                account,
                mint,
                owner,
                rent,
            },
            data,
        };
    }
    exports.decodeInitializeAccountInstruction = decodeInitializeAccountInstruction;
    /**
     * Decode an InitializeAccount instruction without validating it
     *
     * @param instruction Transaction instruction to decode
     *
     * @return Decoded, non-validated instruction
     */
    function decodeInitializeAccountInstructionUnchecked({ programId, keys: [account, mint, owner, rent], data, }) {
        return {
            programId,
            keys: {
                account,
                mint,
                owner,
                rent,
            },
            data: exports.initializeAccountInstructionData.decode(data),
        };
    }
    exports.decodeInitializeAccountInstructionUnchecked = decodeInitializeAccountInstructionUnchecked;
});
define("helpers/decoder/createATAIx", ["require", "exports", "@solana/buffer-layout", "@solana/spl-token", "helpers/decoder/types", "helpers/decoder/errors"], function (require, exports, buffer_layout_3, spl_token_3, types_5, errors_3) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeCreateAssociatedTokenInstructionUnchecked = exports.decodeCreateAssociatedTokenInstruction = exports.createAssociatedTokenInstructionData = void 0;
    exports.createAssociatedTokenInstructionData = (0, buffer_layout_3.struct)([
        (0, buffer_layout_3.u8)("instruction"),
    ]);
    function decodeCreateAssociatedTokenInstruction(instruction, programId = spl_token_3.ASSOCIATED_TOKEN_PROGRAM_ID) {
        if (!instruction.programId.equals(programId))
            throw new errors_3.TokenInvalidInstructionProgramError();
        if (instruction.data.length !== 0 &&
            instruction.data.length !== exports.createAssociatedTokenInstructionData.span)
            throw new errors_3.TokenInvalidInstructionDataError();
        const { keys: { fundingAccount, ataAccount, wallet, mint, systemProgram, splTokenProgram }, data, } = decodeCreateAssociatedTokenInstructionUnchecked(instruction);
        if (data.instruction !== types_5.AssociatedTokenInstruction.Create)
            throw new errors_3.TokenInvalidInstructionTypeError();
        if (!fundingAccount || !ataAccount || !wallet || !mint || !systemProgram || !splTokenProgram)
            throw new errors_3.TokenInvalidInstructionKeysError();
        return {
            programId,
            keys: { fundingAccount, ataAccount, wallet, mint, systemProgram, splTokenProgram },
            data,
        };
    }
    exports.decodeCreateAssociatedTokenInstruction = decodeCreateAssociatedTokenInstruction;
    function decodeCreateAssociatedTokenInstructionUnchecked({ programId, keys: [fundingAccount, ataAccount, wallet, mint, systemProgram, splTokenProgram], data, }) {
        return {
            programId,
            keys: {
                fundingAccount,
                ataAccount,
                wallet,
                mint,
                systemProgram,
                splTokenProgram,
            },
            data: data.length > 0
                ? exports.createAssociatedTokenInstructionData.decode(data)
                : { instruction: types_5.AssociatedTokenInstruction.Create }, // default is create
        };
    }
    exports.decodeCreateAssociatedTokenInstructionUnchecked = decodeCreateAssociatedTokenInstructionUnchecked;
});
define("helpers/decoder/index", ["require", "exports", "helpers/decoder/closeAccountIx", "helpers/decoder/initializeAccountIx", "helpers/decoder/createATAIx"], function (require, exports, closeAccountIx_1, initializeAccountIx_1, createATAIx_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(closeAccountIx_1, exports);
    __exportStar(initializeAccountIx_1, exports);
    __exportStar(createATAIx_1, exports);
});
define("helpers/token-util", ["require", "exports", "@solana/spl-token", "helpers/decoder/index"], function (require, exports, spl_token_4, decoder_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TokenUtil = void 0;
    /**
     * @category Util
     */
    class TokenUtil {
        /**
         *
         * @param transaction
         * @returns Number of InitializeTokenAccount instructions
         */
        static hasInitializeNativeTokenAccountIx(transaction) {
            const accounts = [];
            transaction.instructions.forEach((ix) => {
                try {
                    const init = (0, decoder_1.decodeInitializeAccountInstruction)(ix);
                    if (init.keys.mint.pubkey.equals(spl_token_4.NATIVE_MINT)) {
                        accounts.push(init.keys.account.pubkey);
                    }
                }
                catch (e) {
                    // ignore
                }
            });
            if (accounts.length > 1) {
                throw new Error(`Only one InitializeNativeTokenAccount instruction is allowed. You have ${accounts.length} instructions`);
            }
            if (accounts.length === 1) {
                return accounts[0];
            }
            return null;
        }
        /**
         *
         * @param transaction
         * @returns Number of CloseAccountInstruction instructions
         */
        static hasCloseTokenAccountIx(transaction, closedAccount) {
            transaction.instructions.forEach((ix) => {
                try {
                    const close = (0, decoder_1.decodeCloseAccountInstruction)(ix);
                    if (close.keys.account.pubkey.equals(closedAccount)) {
                        return true;
                    }
                }
                catch (e) {
                    // ignore
                }
            });
            return false;
        }
        static replaceFundingAccountOfCreateATAIx(transaction, feePayer) {
            transaction.instructions.forEach((ix) => {
                try {
                    (0, decoder_1.decodeCreateAssociatedTokenInstruction)(ix);
                    // reassign funding account to fee payer
                    ix.keys[0].pubkey = feePayer;
                }
                catch (e) {
                    // ignore
                }
            });
            return transaction;
        }
    }
    exports.TokenUtil = TokenUtil;
});
define("dapp/dapp-utils", ["require", "exports", "@solana/web3.js", "@solana/spl-token", "gasless/api", "dapp/artifacts/index", "helpers/token-util"], function (require, exports, web3_js_3, spl_token_5, api_1, artifacts_1, token_util_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GaslessDapp = void 0;
    class GaslessDapp {
        constructor(connection, dapps) {
            this.connection = connection;
            this.dapps = dapps;
        }
        static new(connection) {
            return __awaiter(this, void 0, void 0, function* () {
                const network = yield (0, api_1.getNetwork)(connection);
                const dapps = yield (0, artifacts_1.loadArtifacts)(network);
                return new GaslessDapp(connection, dapps);
            });
        }
        decodeTransaction(transaction) {
            let dappIxs = [];
            transaction.instructions.forEach((ix) => {
                const dapp = this.dapps.find((dapp) => ix.programId.equals(dapp.programId));
                if (dapp) {
                    const decoded = dapp.coder.instruction.decode(ix.data);
                    if (decoded) {
                        dappIxs.push(Object.assign({ name: dapp.name, decodedData: decoded.data }, ix));
                    }
                }
            });
            return dappIxs;
        }
        hasDappInstruction(transaction) {
            const dappIxs = this.decodeTransaction(transaction);
            return dappIxs.length > 0 ? true : false;
        }
        addBorrowRepayForRentExemption(transaction, wallet, feePayer) {
            return __awaiter(this, void 0, void 0, function* () {
                const rentExemption = yield spl_token_5.Token.getMinBalanceRentForExemptAccount(this.connection);
                const tx = new web3_js_3.Transaction();
                tx.add(web3_js_3.SystemProgram.transfer({
                    fromPubkey: feePayer,
                    toPubkey: wallet,
                    lamports: rentExemption,
                }));
                tx.add(transaction);
                tx.add(web3_js_3.SystemProgram.transfer({
                    fromPubkey: wallet,
                    toPubkey: feePayer,
                    lamports: rentExemption,
                }));
                return tx;
            });
        }
        build(transaction, wallet, feePayer) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.hasDappInstruction(transaction)) {
                    throw Error(`dapp instruction not found`);
                }
                const account = token_util_1.TokenUtil.hasInitializeNativeTokenAccountIx(transaction);
                if (account) {
                    const isClosed = token_util_1.TokenUtil.hasCloseTokenAccountIx(transaction, account);
                    const balance = yield this.connection.getBalanceAndContext(wallet);
                    if (balance.value === 0 && isClosed) {
                        transaction = yield this.addBorrowRepayForRentExemption(transaction, wallet, feePayer);
                    }
                }
                return transaction;
            });
        }
    }
    exports.GaslessDapp = GaslessDapp;
});
define("dapp/index", ["require", "exports", "dapp/dapp-utils"], function (require, exports, dapp_utils_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(dapp_utils_1, exports);
});
define("gasless/transactions-builder", ["require", "exports", "@solana/web3.js", "gasless/types", "gasless/index", "pow/index", "helpers/token-util"], function (require, exports, web3_js_4, types_6, gasless_1, pow_1, token_util_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GaslessTransaction = void 0;
    class GaslessTransaction {
        constructor(connection, wallet, dapp, gaslessType = types_6.GaslessTypes.POW) {
            this.connection = connection;
            this.wallet = wallet;
            this.dapp = dapp;
            this.transaction = new web3_js_4.Transaction();
            this.signers = [];
            this.gaslessType = gaslessType;
        }
        static fromTransactionBuilder(connection, wallet, compressIx, dappUtil) {
            const { instructions, cleanupInstructions, signers } = compressIx;
            const _this = new GaslessTransaction(connection, wallet, dappUtil);
            _this.addSigners(signers);
            _this.addInstructions(instructions);
            _this.addInstructions(cleanupInstructions);
            return _this;
        }
        addSigners(signers) {
            this.signers = signers;
            return this;
        }
        addInstructions(ixs) {
            for (let i = 0; i < ixs.length; i++) {
                const ix = ixs[i];
                this.transaction.add(ix);
            }
            return this;
        }
        setGaslessType(gaslessType) {
            this.gaslessType = gaslessType;
            return this;
        }
        // async build(gaslessType?: GaslessTypes): Promise<Transaction> {
        //   if (gaslessType) {
        //     this.gaslessType = gaslessType;
        //   } else {
        //     // Automatically detect the dapp type
        //     if (this.dapp.hasDappInstruction(this.transaction)) {
        //       this.gaslessType = GaslessTypes.Dapp;
        //     }
        //   }
        //   const { feePayer } = await getGaslessInfo(this.connection);
        //   if (this.gaslessType === GaslessTypes.Dapp) {
        //     this.transaction = await this.dapp.build(this.transaction, this.wallet.publicKey, feePayer);
        //   } else if (this.gaslessType === GaslessTypes.POW) {
        //     // TODO:
        //   } else {
        //     throw Error(`${this.gaslessType} not supported`);
        //   }
        //   this.transaction.feePayer = feePayer;
        //   this.transaction.recentBlockhash = (await this.connection.getRecentBlockhash()).blockhash;
        //   for (let i = 0; i < this.signers.length; i++) {
        //     const s = this.signers[i];
        //     this.transaction.sign(s);
        //   }
        //   return this.transaction;
        // }
        buildAndExecute() {
            return __awaiter(this, void 0, void 0, function* () {
                // Automatically detect the dapp type
                if (this.dapp.hasDappInstruction(this.transaction)) {
                    this.gaslessType = types_6.GaslessTypes.Dapp;
                }
                const { feePayer } = yield (0, gasless_1.getGaslessInfo)(this.connection);
                if (this.gaslessType === types_6.GaslessTypes.Dapp) {
                    this.transaction = yield this.dapp.build(this.transaction, this.wallet.publicKey, feePayer);
                    this.transaction.feePayer = feePayer;
                    this.transaction.recentBlockhash = (yield this.connection.getRecentBlockhash()).blockhash;
                    for (let i = 0; i < this.signers.length; i++) {
                        const s = this.signers[i];
                        this.transaction.sign(s);
                    }
                    this.transaction = yield this.wallet.signTransaction(this.transaction);
                    const txid = yield (0, gasless_1.sendToGasless)(this.connection, this.transaction, this.gaslessType);
                    return txid;
                }
                else if (this.gaslessType === types_6.GaslessTypes.POW) {
                    const puzzle = yield (0, gasless_1.getPuzzle)(this.connection, this.wallet.publicKey);
                    const solution = yield pow_1.POWPuzzle.solveAsync(pow_1.Question.fromObject(puzzle.question));
                    const rawSolution = Object.assign({ address: this.wallet.publicKey.toBase58(), solution: solution.toString(16) }, puzzle);
                    // pay for initializing token account fee
                    this.transaction = token_util_2.TokenUtil.replaceFundingAccountOfCreateATAIx(this.transaction, feePayer);
                    this.transaction.feePayer = feePayer;
                    this.transaction.recentBlockhash = (yield this.connection.getRecentBlockhash()).blockhash;
                    for (let i = 0; i < this.signers.length; i++) {
                        const s = this.signers[i];
                        this.transaction.sign(s);
                    }
                    this.transaction = yield this.wallet.signTransaction(this.transaction);
                    const txid = yield (0, gasless_1.postSolution)(this.connection, rawSolution, this.transaction);
                    return txid;
                }
                else {
                    throw Error(`${this.gaslessType} not supported`);
                }
            });
        }
        asyncBuildAndExecute(cb) {
            setTimeout(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const txid = yield this.buildAndExecute();
                    cb(null, txid);
                }
                catch (e) {
                    cb(e, "");
                }
            }), 0);
        }
    }
    exports.GaslessTransaction = GaslessTransaction;
});
define("gasless/index", ["require", "exports", "gasless/transactions-builder", "gasless/types", "gasless/api"], function (require, exports, transactions_builder_1, types_7, api_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(transactions_builder_1, exports);
    __exportStar(types_7, exports);
    __exportStar(api_2, exports);
});
define("helpers/index", ["require", "exports", "helpers/token-util", "helpers/decoder/index"], function (require, exports, token_util_3, decoder_2) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(token_util_3, exports);
    __exportStar(decoder_2, exports);
});
define("index", ["require", "exports", "gasless/index", "pow/index", "dapp/index", "helpers/index"], function (require, exports, gasless_2, pow_2, dapp_1, helpers_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(gasless_2, exports);
    __exportStar(pow_2, exports);
    __exportStar(dapp_1, exports);
    __exportStar(helpers_1, exports);
});
define("tsconfig", [], {
    "extends": "../tsconfig-base.json",
    "compilerOptions": {
        "composite": true
    },
    "include": ["./**/*", "./**/*.json"],
    "typedocOptions": {
        "entryPoints": ["index.ts"],
        "out": "../../target/typedocs"
    }
});
